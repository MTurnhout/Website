{"version":3,"sources":["./node_modules/ng-recaptcha/__ivy_ngcc__/fesm2015/ng-recaptcha.js","./src/app/pages/login/login-routing.module.ts","./src/app/pages/login/login.component.ts","./src/app/pages/login/login.component.html","./src/app/pages/login/login.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AAC0J;AAC9J;AACA;AACY;;AAExB;AACxC,+BAA+B,4DAAc;AAC7C,+BAA+B,4DAAc;AAC7C,4BAA4B,4DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,UAAU,WAAW,4BAA4B,UAAU;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yEAAiB,oEAAoE,+CAAE;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yEAAiB;AAC7B,gCAAgC,oDAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,gEAAyB,EAAE,qFAAqF,0CAA0C,sDAAe,CAAC,yDAAW,GAAG,sDAAe,yBAAyB,sDAAe,yBAAyB,sDAAe,sBAAsB,EAAE,oBAAoB;AAC5W,cAAc,+DAAwB;AACtC,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU;AAC/B,sBAAsB,oDAAM;AAC5B,uBAAuB,yDAAW;AAClC,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG,6FAA6F;AACpH;AACA;AACA;AACA;AACA;AACA,oDAAoD,wDAAU;AAC9D,IAAI,qDAAO,IAAI,4DAAM,CAAC,yDAAW;AACjC,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AAC7C,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AAC7C,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AAC7C,IAAI,wDAAU;AACd;AACA;;AAEA,+BAA+B,4DAAc;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+DAAwB,EAAE,yGAAyG,sCAAsC,+DAAwB,CAAC,wDAAU,GAAG,+DAAwB,0BAA0B,+DAAwB,CAAC,oDAAM,GAAG,+DAAwB,yBAAyB,EAAE,4EAA4E;AACtc,QAAQ,6DAAsB;AAC9B,KAAK;AACL,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,iHAAiH,YAAY,uBAAuB,wGAAwG,EAAE,oBAAoB;AACpS,cAAc,+DAAwB;AACtC,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,wDAAU,EAAE,GAAG,+BAA+B,GAAG,OAAO,oDAAM,EAAE,GAAG;AACzG,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,yDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kB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","file":"pages-login-login-module-es2015.js","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, EventEmitter, Input, HostBinding, Output, Component, ElementRef, NgZone, NgModule, HostListener, Directive, forwardRef } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nimport * as ɵngcc0 from '@angular/core';\nconst RECAPTCHA_LANGUAGE = new InjectionToken('recaptcha-language');\nconst RECAPTCHA_BASE_URL = new InjectionToken('recaptcha-base-url');\nconst RECAPTCHA_NONCE = new InjectionToken('recaptcha-nonce-tag');\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement('script');\n    script.innerHTML = '';\n    const baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nlet RecaptchaLoaderService = RecaptchaLoaderService_1 = class RecaptchaLoaderService {\n    constructor(\n    // tslint:disable-next-line:no-any\n    platformId, language, baseUrl, nonce) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService_1.ready.asObservable() : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService_1.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService_1.ready = subject;\n            const langParam = this.language ? '&hl=' + this.language : '';\n            loadScript('explicit', (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n}\nRecaptchaLoaderService.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: RecaptchaLoaderService, factory: function RecaptchaLoaderService_Factory(t) { return new (t || RecaptchaLoaderService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaLoaderService, [{\n        type: Injectable\n    }], function () { return [{ type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_LANGUAGE]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_BASE_URL]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_NONCE]\n            }] }]; }, { constructor: [], platformId: [], language: [], baseUrl: [], nonce: [], ready: [], init: [] });;\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService = RecaptchaLoaderService_1 = __decorate([\n    __param(0, Inject(PLATFORM_ID)),\n    __param(1, Optional()), __param(1, Inject(RECAPTCHA_LANGUAGE)),\n    __param(2, Optional()), __param(2, Inject(RECAPTCHA_BASE_URL)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [Object, String, String, String])\n], RecaptchaLoaderService);\nvar RecaptchaLoaderService_1;\n\nconst RECAPTCHA_SETTINGS = new InjectionToken('recaptcha-settings');\n\nlet nextId = 0;\nlet RecaptchaComponent = class RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.resolved = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            'expired-callback': () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n}\nRecaptchaComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: RecaptchaComponent, selectors: [[\"re-captcha\"]], factory: function RecaptchaComponent_Factory(t) { return new (t || RecaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(RecaptchaLoaderService), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(RECAPTCHA_SETTINGS, 8)); }, hostBindings: function RecaptchaComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵallocHostVars(1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n    } }, inputs: { id: \"id\", siteKey: \"siteKey\", theme: \"theme\", type: \"type\", size: \"size\", badge: \"badge\", tabIndex: \"tabIndex\" }, outputs: { resolved: \"resolved\" }, exportAs: [\"reCaptcha\"], consts: 0, vars: 0, template: function RecaptchaComponent_Template(rf, ctx) { }, encapsulation: 2 });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaComponent, [{\n        type: Component,\n        args: [{\n                exportAs: 'reCaptcha',\n                selector: 're-captcha',\n                template: ``\n            }]\n    }], function () { return [{ type: ElementRef }, { type: RecaptchaLoaderService }, { type: NgZone }, { type: Object, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_SETTINGS]\n            }] }]; }, { constructor: [], elementRef: [], loader: [], zone: [], id: [{\n            type: Input\n        }, {\n            type: HostBinding,\n            args: ['attr.id']\n        }], resolved: [{\n            type: Output\n        }], siteKey: [{\n            type: Input\n        }], theme: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], size: [{\n            type: Input\n        }], badge: [{\n            type: Input\n        }], ngAfterViewInit: [], subscription: [], grecaptcha: [], ngOnDestroy: [], execute: [], executeRequested: [], reset: [], expired: [], captchaResponseCallback: [], grecaptchaReset: [], renderRecaptcha: [], widget: [], tabIndex: [{\n            type: Input\n        }] });;\n__decorate([\n    Input(),\n    HostBinding('attr.id'),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"id\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"siteKey\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"type\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"size\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], RecaptchaComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"badge\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"resolved\", void 0);\nRecaptchaComponent = __decorate([\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_SETTINGS)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        RecaptchaLoaderService,\n        NgZone, Object])\n], RecaptchaComponent);\n\nlet RecaptchaCommonModule = class RecaptchaCommonModule {\n}\nRecaptchaCommonModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: RecaptchaCommonModule });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(RecaptchaCommonModule, { declarations: [RecaptchaComponent], exports: [RecaptchaComponent] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaCommonModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    RecaptchaComponent,\n                ],\n                exports: [\n                    RecaptchaComponent,\n                ]\n            }]\n    }], null, null);\nRecaptchaCommonModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function RecaptchaCommonModule_Factory(t) { return new (t || RecaptchaCommonModule)(); } });;\n\nlet RecaptchaModule = RecaptchaModule_1 = class RecaptchaModule {\n    // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n    static forRoot() {\n        return RecaptchaModule_1;\n    }\n}\nRecaptchaModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: RecaptchaModule });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(RecaptchaModule, { imports: [RecaptchaCommonModule], exports: [RecaptchaComponent] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaModule, [{\n        type: NgModule,\n        args: [{\n                exports: [\n                    RecaptchaComponent,\n                ],\n                imports: [\n                    RecaptchaCommonModule,\n                ],\n                providers: [\n                    RecaptchaLoaderService,\n                ]\n            }]\n    }], null, null);\nRecaptchaModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function RecaptchaModule_Factory(t) { return new (t || RecaptchaModule)(); }, providers: [\n        RecaptchaLoaderService,\n    ], imports: [[\n            RecaptchaCommonModule,\n        ]] });;\nvar RecaptchaModule_1;\n\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken('recaptcha-v3-site-key');\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nlet ReCaptchaV3Service = class ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // tslint:disable-next-line:no-any\n    platformId, baseUrl, nonce) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        this.zone.runOutsideAngular(() => {\n            // tslint:disable-next-line:no-any\n            this.grecaptcha.execute(this.siteKey, { action }).then((token) => {\n                this.zone.run(() => {\n                    subject.next(token);\n                    subject.complete();\n                    if (this.onExecuteSubject) {\n                        this.onExecuteSubject.next({ action, token });\n                    }\n                });\n            });\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if ('grecaptcha' in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                loadScript(this.siteKey, this.onLoadComplete, '', this.baseUrl, this.nonce);\n            }\n        }\n    }\n}\nReCaptchaV3Service.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ReCaptchaV3Service, factory: function ReCaptchaV3Service_Factory(t) { return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(RECAPTCHA_V3_SITE_KEY), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n        type: Injectable\n    }], function () { return [{ type: NgZone }, { type: String, decorators: [{\n                type: Inject,\n                args: [RECAPTCHA_V3_SITE_KEY]\n            }] }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_BASE_URL]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_NONCE]\n            }] }]; }, { constructor: [], onLoadComplete: [], grecaptcha: [], actionBacklog: [], zone: [], isBrowser: [], siteKey: [], nonce: [], baseUrl: [], onExecute: [], onExecuteSubject: [], onExecuteObservable: [], execute: [], executeActionWithSubject: [], init: [] });;\nReCaptchaV3Service = __decorate([\n    __param(1, Inject(RECAPTCHA_V3_SITE_KEY)),\n    __param(2, Inject(PLATFORM_ID)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_BASE_URL)),\n    __param(4, Optional()), __param(4, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [NgZone, String, Object, String, String])\n], ReCaptchaV3Service);\n\nlet RecaptchaV3Module = class RecaptchaV3Module {\n}\nRecaptchaV3Module.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: RecaptchaV3Module });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaV3Module, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    ReCaptchaV3Service,\n                ]\n            }]\n    }], null, null);\nRecaptchaV3Module.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function RecaptchaV3Module_Factory(t) { return new (t || RecaptchaV3Module)(); }, providers: [\n        ReCaptchaV3Service,\n    ] });;\n\nlet RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = class RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n    }\n    registerOnChange(fn) { this.onChange = fn; }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n}\nRecaptchaValueAccessorDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: RecaptchaValueAccessorDirective, selectors: [[\"re-captcha\", \"formControlName\", \"\"], [\"re-captcha\", \"formControl\", \"\"], [\"re-captcha\", \"ngModel\", \"\"]], factory: function RecaptchaValueAccessorDirective_Factory(t) { return new (t || RecaptchaValueAccessorDirective)(ɵngcc0.ɵɵdirectiveInject(RecaptchaComponent)); }, hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resolved\", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) { return ctx.onResolve($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                multi: true,\n                provide: NG_VALUE_ACCESSOR,\n                // tslint:disable-next-line:no-forward-ref\n                useExisting: forwardRef(() => RecaptchaValueAccessorDirective_1)\n            },\n        ])] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaValueAccessorDirective, [{\n        type: Directive,\n        args: [{\n                providers: [\n                    {\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        // tslint:disable-next-line:no-forward-ref\n                        useExisting: forwardRef(() => RecaptchaValueAccessorDirective_1)\n                    },\n                ],\n                // tslint:disable-next-line:directive-selector\n                selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]'\n            }]\n    }], function () { return [{ type: RecaptchaComponent }]; }, { constructor: [], host: [], writeValue: [], registerOnChange: [], onChange: [], registerOnTouched: [], onTouched: [], onResolve: [{\n            type: HostListener,\n            args: ['resolved', ['$event']]\n        }] });;\n__decorate([\n    HostListener('resolved', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", void 0)\n], RecaptchaValueAccessorDirective.prototype, \"onResolve\", null);\nRecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = __decorate([\n    __metadata(\"design:paramtypes\", [RecaptchaComponent])\n], RecaptchaValueAccessorDirective);\nvar RecaptchaValueAccessorDirective_1;\n\nlet RecaptchaFormsModule = class RecaptchaFormsModule {\n}\nRecaptchaFormsModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: RecaptchaFormsModule });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(RecaptchaFormsModule, { declarations: function () { return [RecaptchaValueAccessorDirective]; }, imports: function () { return [FormsModule,\n        RecaptchaCommonModule]; }, exports: function () { return [RecaptchaValueAccessorDirective]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaFormsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    RecaptchaValueAccessorDirective,\n                ],\n                exports: [RecaptchaValueAccessorDirective],\n                imports: [FormsModule, RecaptchaCommonModule]\n            }]\n    }], null, null);\nRecaptchaFormsModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function RecaptchaFormsModule_Factory(t) { return new (t || RecaptchaFormsModule)(); }, imports: [[FormsModule, RecaptchaCommonModule]] });;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa };\n\n//# sourceMappingURL=ng-recaptcha.js.map","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { SecurityService } from \"@core/security\";\r\nimport { AuthenticationType } from \"@core/security/enums/authentication-type.enum\";\r\nimport { ToastService } from \"@core/toast\";\r\nimport { environment } from \"@environments/environment\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.scss\"]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public formValidation: FormGroup;\r\n  public recaptchaSiteKey: string;\r\n  public readonly azureAdAuthenticationEnabled: boolean;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private securityService: SecurityService,\r\n    private toastService: ToastService\r\n  ) {\r\n    this.azureAdAuthenticationEnabled = environment.azureAdSettings.enabled;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.initValidation();\r\n    this.recaptchaSiteKey = environment.recaptchaSiteKey;\r\n  }\r\n\r\n  public initValidation() {\r\n    this.formValidation = new FormGroup({\r\n      email: new FormControl(null, [Validators.required, Validators.email]),\r\n      password: new FormControl(null, [\r\n        Validators.required,\r\n        Validators.pattern(\r\n          /^(?=.*[\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\_\\=\\+])(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\_\\=\\+]{8,}$/\r\n        )\r\n      ]),\r\n      recaptcha: new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  public login() {\r\n    if (!this.formValidation.valid) {\r\n      this.formValidation.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    this.securityService\r\n      .login({\r\n        email: this.formValidation.get(\"email\").value,\r\n        password: this.formValidation.get(\"password\").value,\r\n        recaptcha: this.formValidation.get(\"recaptcha\").value\r\n      })\r\n      .subscribe(\r\n        () => {\r\n          const returnUrl = this.route.snapshot.queryParams.returnUrl || \"/\";\r\n          this.router.navigate([returnUrl]);\r\n        },\r\n        error => {\r\n          this.toastService.showError(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  public azureAdLogin() {\r\n    this.externalLogin(AuthenticationType.AzureAd);\r\n  }\r\n\r\n  private externalLogin(authenticationType: AuthenticationType) {\r\n    this.securityService.externalLogin(authenticationType).then(\r\n      () => {\r\n        const returnUrl = this.route.snapshot.queryParams.returnUrl || \"/\";\r\n        this.router.navigate([returnUrl]);\r\n      },\r\n      error => {\r\n        this.toastService.showError(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-md-8 col-xl-6 mx-auto\">\r\n    <div class=\"card\" [formGroup]=\"formValidation\">\r\n      <div class=\"card-body\">\r\n        <div class=\"form-group\">\r\n          <label>Email address</label>\r\n          <input\r\n            type=\"email\"\r\n            formControlName=\"email\"\r\n            class=\"form-control\"\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            formControlName=\"password\"\r\n            class=\"form-control\"\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <re-captcha\r\n            formControlName=\"recaptcha\"\r\n            [siteKey]=\"recaptchaSiteKey\"\r\n            theme=\"dark\"\r\n          ></re-captcha>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-footer\">\r\n        <button\r\n          class=\"btn btn-secondary\"\r\n          (click)=\"azureAdLogin()\"\r\n          *ngIf=\"azureAdAuthenticationEnabled\"\r\n        >\r\n          <svg class=\"msazure-logo\" viewBox=\"0 0 72 72\">\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M0 34.219H34.219V0H0V34.219Z\"\r\n              transform=\"translate(0.00499725 0.00601196)\"\r\n              fill=\"#F25022\"\r\n            ></path>\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M0 34.219H34.219V0H0V34.219Z\"\r\n              transform=\"translate(37.779)\"\r\n              fill=\"#7FBA00\"\r\n            ></path>\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M0 34.219H34.219V0H0V34.219Z\"\r\n              transform=\"translate(0 37.779)\"\r\n              fill=\"#00A4EF\"\r\n            ></path>\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M0 34.219H34.219V0H0V34.219Z\"\r\n              transform=\"translate(37.779 37.779)\"\r\n              fill=\"#FFB900\"\r\n            ></path>\r\n          </svg>\r\n        </button>\r\n        <button\r\n          class=\"btn btn-primary float-right\"\r\n          (click)=\"login()\"\r\n          [disabled]=\"formValidation.invalid\"\r\n        >\r\n          Login\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { SharedModule } from \"@shared/shared.module\";\r\nimport { RecaptchaFormsModule, RecaptchaModule } from \"ng-recaptcha\";\r\nimport { LoginRoutingModule } from \"./login-routing.module\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    SharedModule,\r\n    RecaptchaModule,\r\n    RecaptchaFormsModule\r\n  ]\r\n})\r\nexport class LoginModule {}\r\n"],"sourceRoot":"webpack:///"}