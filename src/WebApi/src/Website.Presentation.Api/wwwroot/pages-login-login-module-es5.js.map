{"version":3,"sources":["node_modules/ng-recaptcha/__ivy_ngcc__/fesm2015/ng-recaptcha.js","src/app/pages/login/login-routing.module.ts","src/app/pages/login/login.component.ts","src/app/pages/login/login.component.html","src/app/pages/login/login.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, EventEmitter, Input, HostBinding, Output, Component, ElementRef, NgZone, NgModule, HostListener, Directive, forwardRef } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nimport * as ɵngcc0 from '@angular/core';\nconst RECAPTCHA_LANGUAGE = new InjectionToken('recaptcha-language');\nconst RECAPTCHA_BASE_URL = new InjectionToken('recaptcha-base-url');\nconst RECAPTCHA_NONCE = new InjectionToken('recaptcha-nonce-tag');\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement('script');\n    script.innerHTML = '';\n    const baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nlet RecaptchaLoaderService = RecaptchaLoaderService_1 = class RecaptchaLoaderService {\n    constructor(\n    // tslint:disable-next-line:no-any\n    platformId, language, baseUrl, nonce) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService_1.ready.asObservable() : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService_1.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService_1.ready = subject;\n            const langParam = this.language ? '&hl=' + this.language : '';\n            loadScript('explicit', (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n}\nRecaptchaLoaderService.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: RecaptchaLoaderService, factory: function RecaptchaLoaderService_Factory(t) { return new (t || RecaptchaLoaderService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaLoaderService, [{\n        type: Injectable\n    }], function () { return [{ type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_LANGUAGE]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_BASE_URL]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_NONCE]\n            }] }]; }, { constructor: [], platformId: [], language: [], baseUrl: [], nonce: [], ready: [], init: [] });;\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService = RecaptchaLoaderService_1 = __decorate([\n    __param(0, Inject(PLATFORM_ID)),\n    __param(1, Optional()), __param(1, Inject(RECAPTCHA_LANGUAGE)),\n    __param(2, Optional()), __param(2, Inject(RECAPTCHA_BASE_URL)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [Object, String, String, String])\n], RecaptchaLoaderService);\nvar RecaptchaLoaderService_1;\n\nconst RECAPTCHA_SETTINGS = new InjectionToken('recaptcha-settings');\n\nlet nextId = 0;\nlet RecaptchaComponent = class RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.resolved = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            'expired-callback': () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n}\nRecaptchaComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: RecaptchaComponent, selectors: [[\"re-captcha\"]], factory: function RecaptchaComponent_Factory(t) { return new (t || RecaptchaComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(RecaptchaLoaderService), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(RECAPTCHA_SETTINGS, 8)); }, hostBindings: function RecaptchaComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵallocHostVars(1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n    } }, inputs: { id: \"id\", siteKey: \"siteKey\", theme: \"theme\", type: \"type\", size: \"size\", badge: \"badge\", tabIndex: \"tabIndex\" }, outputs: { resolved: \"resolved\" }, exportAs: [\"reCaptcha\"], consts: 0, vars: 0, template: function RecaptchaComponent_Template(rf, ctx) { }, encapsulation: 2 });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaComponent, [{\n        type: Component,\n        args: [{\n                exportAs: 'reCaptcha',\n                selector: 're-captcha',\n                template: ``\n            }]\n    }], function () { return [{ type: ElementRef }, { type: RecaptchaLoaderService }, { type: NgZone }, { type: Object, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_SETTINGS]\n            }] }]; }, { constructor: [], elementRef: [], loader: [], zone: [], id: [{\n            type: Input\n        }, {\n            type: HostBinding,\n            args: ['attr.id']\n        }], resolved: [{\n            type: Output\n        }], siteKey: [{\n            type: Input\n        }], theme: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], size: [{\n            type: Input\n        }], badge: [{\n            type: Input\n        }], ngAfterViewInit: [], subscription: [], grecaptcha: [], ngOnDestroy: [], execute: [], executeRequested: [], reset: [], expired: [], captchaResponseCallback: [], grecaptchaReset: [], renderRecaptcha: [], widget: [], tabIndex: [{\n            type: Input\n        }] });;\n__decorate([\n    Input(),\n    HostBinding('attr.id'),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"id\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"siteKey\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"type\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"size\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], RecaptchaComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"badge\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"resolved\", void 0);\nRecaptchaComponent = __decorate([\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_SETTINGS)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        RecaptchaLoaderService,\n        NgZone, Object])\n], RecaptchaComponent);\n\nlet RecaptchaCommonModule = class RecaptchaCommonModule {\n}\nRecaptchaCommonModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: RecaptchaCommonModule });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(RecaptchaCommonModule, { declarations: [RecaptchaComponent], exports: [RecaptchaComponent] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaCommonModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    RecaptchaComponent,\n                ],\n                exports: [\n                    RecaptchaComponent,\n                ]\n            }]\n    }], null, null);\nRecaptchaCommonModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function RecaptchaCommonModule_Factory(t) { return new (t || RecaptchaCommonModule)(); } });;\n\nlet RecaptchaModule = RecaptchaModule_1 = class RecaptchaModule {\n    // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n    static forRoot() {\n        return RecaptchaModule_1;\n    }\n}\nRecaptchaModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: RecaptchaModule });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(RecaptchaModule, { imports: [RecaptchaCommonModule], exports: [RecaptchaComponent] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaModule, [{\n        type: NgModule,\n        args: [{\n                exports: [\n                    RecaptchaComponent,\n                ],\n                imports: [\n                    RecaptchaCommonModule,\n                ],\n                providers: [\n                    RecaptchaLoaderService,\n                ]\n            }]\n    }], null, null);\nRecaptchaModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function RecaptchaModule_Factory(t) { return new (t || RecaptchaModule)(); }, providers: [\n        RecaptchaLoaderService,\n    ], imports: [[\n            RecaptchaCommonModule,\n        ]] });;\nvar RecaptchaModule_1;\n\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken('recaptcha-v3-site-key');\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nlet ReCaptchaV3Service = class ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // tslint:disable-next-line:no-any\n    platformId, baseUrl, nonce) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        this.zone.runOutsideAngular(() => {\n            // tslint:disable-next-line:no-any\n            this.grecaptcha.execute(this.siteKey, { action }).then((token) => {\n                this.zone.run(() => {\n                    subject.next(token);\n                    subject.complete();\n                    if (this.onExecuteSubject) {\n                        this.onExecuteSubject.next({ action, token });\n                    }\n                });\n            });\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if ('grecaptcha' in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                loadScript(this.siteKey, this.onLoadComplete, '', this.baseUrl, this.nonce);\n            }\n        }\n    }\n}\nReCaptchaV3Service.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: ReCaptchaV3Service, factory: function ReCaptchaV3Service_Factory(t) { return new (t || ReCaptchaV3Service)(ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(RECAPTCHA_V3_SITE_KEY), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(RECAPTCHA_BASE_URL, 8), ɵngcc0.ɵɵinject(RECAPTCHA_NONCE, 8)); }, providedIn: null });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n        type: Injectable\n    }], function () { return [{ type: NgZone }, { type: String, decorators: [{\n                type: Inject,\n                args: [RECAPTCHA_V3_SITE_KEY]\n            }] }, { type: Object, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_BASE_URL]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [RECAPTCHA_NONCE]\n            }] }]; }, { constructor: [], onLoadComplete: [], grecaptcha: [], actionBacklog: [], zone: [], isBrowser: [], siteKey: [], nonce: [], baseUrl: [], onExecute: [], onExecuteSubject: [], onExecuteObservable: [], execute: [], executeActionWithSubject: [], init: [] });;\nReCaptchaV3Service = __decorate([\n    __param(1, Inject(RECAPTCHA_V3_SITE_KEY)),\n    __param(2, Inject(PLATFORM_ID)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_BASE_URL)),\n    __param(4, Optional()), __param(4, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [NgZone, String, Object, String, String])\n], ReCaptchaV3Service);\n\nlet RecaptchaV3Module = class RecaptchaV3Module {\n}\nRecaptchaV3Module.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: RecaptchaV3Module });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaV3Module, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    ReCaptchaV3Service,\n                ]\n            }]\n    }], null, null);\nRecaptchaV3Module.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function RecaptchaV3Module_Factory(t) { return new (t || RecaptchaV3Module)(); }, providers: [\n        ReCaptchaV3Service,\n    ] });;\n\nlet RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = class RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n    }\n    registerOnChange(fn) { this.onChange = fn; }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n}\nRecaptchaValueAccessorDirective.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: RecaptchaValueAccessorDirective, selectors: [[\"re-captcha\", \"formControlName\", \"\"], [\"re-captcha\", \"formControl\", \"\"], [\"re-captcha\", \"ngModel\", \"\"]], factory: function RecaptchaValueAccessorDirective_Factory(t) { return new (t || RecaptchaValueAccessorDirective)(ɵngcc0.ɵɵdirectiveInject(RecaptchaComponent)); }, hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx, elIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resolved\", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) { return ctx.onResolve($event); });\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                multi: true,\n                provide: NG_VALUE_ACCESSOR,\n                // tslint:disable-next-line:no-forward-ref\n                useExisting: forwardRef(() => RecaptchaValueAccessorDirective_1)\n            },\n        ])] });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaValueAccessorDirective, [{\n        type: Directive,\n        args: [{\n                providers: [\n                    {\n                        multi: true,\n                        provide: NG_VALUE_ACCESSOR,\n                        // tslint:disable-next-line:no-forward-ref\n                        useExisting: forwardRef(() => RecaptchaValueAccessorDirective_1)\n                    },\n                ],\n                // tslint:disable-next-line:directive-selector\n                selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]'\n            }]\n    }], function () { return [{ type: RecaptchaComponent }]; }, { constructor: [], host: [], writeValue: [], registerOnChange: [], onChange: [], registerOnTouched: [], onTouched: [], onResolve: [{\n            type: HostListener,\n            args: ['resolved', ['$event']]\n        }] });;\n__decorate([\n    HostListener('resolved', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", void 0)\n], RecaptchaValueAccessorDirective.prototype, \"onResolve\", null);\nRecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = __decorate([\n    __metadata(\"design:paramtypes\", [RecaptchaComponent])\n], RecaptchaValueAccessorDirective);\nvar RecaptchaValueAccessorDirective_1;\n\nlet RecaptchaFormsModule = class RecaptchaFormsModule {\n}\nRecaptchaFormsModule.ngModuleDef = ɵngcc0.ɵɵdefineNgModule({ type: RecaptchaFormsModule });\n/*@__PURE__*/ ɵngcc0.ɵɵsetNgModuleScope(RecaptchaFormsModule, { declarations: function () { return [RecaptchaValueAccessorDirective]; }, imports: function () { return [FormsModule,\n        RecaptchaCommonModule]; }, exports: function () { return [RecaptchaValueAccessorDirective]; } });\n/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(RecaptchaFormsModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    RecaptchaValueAccessorDirective,\n                ],\n                exports: [RecaptchaValueAccessorDirective],\n                imports: [FormsModule, RecaptchaCommonModule]\n            }]\n    }], null, null);\nRecaptchaFormsModule.ngInjectorDef = ɵngcc0.ɵɵdefineInjector({ factory: function RecaptchaFormsModule_Factory(t) { return new (t || RecaptchaFormsModule)(); }, imports: [[FormsModule, RecaptchaCommonModule]] });;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa };\n\n//# sourceMappingURL=ng-recaptcha.js.map","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"\",\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { SecurityService } from \"@core/security\";\r\nimport { AuthenticationType } from \"@core/security/enums/authentication-type.enum\";\r\nimport { ToastService } from \"@core/toast\";\r\nimport { environment } from \"@environments/environment\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.scss\"]\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public formValidation: FormGroup;\r\n  public recaptchaSiteKey: string;\r\n  public readonly azureAdAuthenticationEnabled: boolean;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private securityService: SecurityService,\r\n    private toastService: ToastService\r\n  ) {\r\n    this.azureAdAuthenticationEnabled = environment.azureAdSettings.enabled;\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.initValidation();\r\n    this.recaptchaSiteKey = environment.recaptchaSiteKey;\r\n  }\r\n\r\n  public initValidation() {\r\n    this.formValidation = new FormGroup({\r\n      email: new FormControl(null, [Validators.required, Validators.email]),\r\n      password: new FormControl(null, [\r\n        Validators.required,\r\n        Validators.pattern(\r\n          /^(?=.*[\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\_\\=\\+])(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\_\\=\\+]{8,}$/\r\n        )\r\n      ]),\r\n      recaptcha: new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  public login() {\r\n    if (!this.formValidation.valid) {\r\n      this.formValidation.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    this.securityService\r\n      .login({\r\n        email: this.formValidation.get(\"email\").value,\r\n        password: this.formValidation.get(\"password\").value,\r\n        recaptcha: this.formValidation.get(\"recaptcha\").value\r\n      })\r\n      .subscribe(\r\n        () => {\r\n          const returnUrl = this.route.snapshot.queryParams.returnUrl || \"/\";\r\n          this.router.navigate([returnUrl]);\r\n        },\r\n        error => {\r\n          this.toastService.showError(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  public azureAdLogin() {\r\n    this.externalLogin(AuthenticationType.AzureAd);\r\n  }\r\n\r\n  private externalLogin(authenticationType: AuthenticationType) {\r\n    this.securityService.externalLogin(authenticationType).then(\r\n      () => {\r\n        const returnUrl = this.route.snapshot.queryParams.returnUrl || \"/\";\r\n        this.router.navigate([returnUrl]);\r\n      },\r\n      error => {\r\n        this.toastService.showError(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"row\">\r\n  <div class=\"col-md-8 col-xl-6 mx-auto\">\r\n    <div class=\"card\" [formGroup]=\"formValidation\">\r\n      <div class=\"card-body\">\r\n        <div class=\"form-group\">\r\n          <label>Email address</label>\r\n          <input\r\n            type=\"email\"\r\n            formControlName=\"email\"\r\n            class=\"form-control\"\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label>Password</label>\r\n          <input\r\n            type=\"password\"\r\n            formControlName=\"password\"\r\n            class=\"form-control\"\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <re-captcha\r\n            formControlName=\"recaptcha\"\r\n            [siteKey]=\"recaptchaSiteKey\"\r\n            theme=\"dark\"\r\n          ></re-captcha>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-footer\">\r\n        <button\r\n          class=\"btn btn-secondary\"\r\n          (click)=\"azureAdLogin()\"\r\n          *ngIf=\"azureAdAuthenticationEnabled\"\r\n        >\r\n          <svg class=\"msazure-logo\" viewBox=\"0 0 72 72\">\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M0 34.219H34.219V0H0V34.219Z\"\r\n              transform=\"translate(0.00499725 0.00601196)\"\r\n              fill=\"#F25022\"\r\n            ></path>\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M0 34.219H34.219V0H0V34.219Z\"\r\n              transform=\"translate(37.779)\"\r\n              fill=\"#7FBA00\"\r\n            ></path>\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M0 34.219H34.219V0H0V34.219Z\"\r\n              transform=\"translate(0 37.779)\"\r\n              fill=\"#00A4EF\"\r\n            ></path>\r\n            <path\r\n              fill-rule=\"evenodd\"\r\n              clip-rule=\"evenodd\"\r\n              d=\"M0 34.219H34.219V0H0V34.219Z\"\r\n              transform=\"translate(37.779 37.779)\"\r\n              fill=\"#FFB900\"\r\n            ></path>\r\n          </svg>\r\n        </button>\r\n        <button\r\n          class=\"btn btn-primary float-right\"\r\n          (click)=\"login()\"\r\n          [disabled]=\"formValidation.invalid\"\r\n        >\r\n          Login\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { SharedModule } from \"@shared/shared.module\";\r\nimport { RecaptchaFormsModule, RecaptchaModule } from \"ng-recaptcha\";\r\nimport { LoginRoutingModule } from \"./login-routing.module\";\r\nimport { LoginComponent } from \"./login.component\";\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    SharedModule,\r\n    RecaptchaModule,\r\n    RecaptchaFormsModule\r\n  ]\r\n})\r\nexport class LoginModule {}\r\n"],"sourceRoot":"webpack:///","file":"pages-login-login-module-es5.js"}